header {#include<cmath>
};

start e;


NUMBER : "[0-9]+";
PLUS : "[+]";
MUL : "[*]";
LP : "[(]";
RP : "[)]";
DIV : "/";
MINUS : "-";
POW : "[\^]";
WS : "[ \t\r\n ]" ignore;

e returns [int]: t es[$t.out] { $out = $es.out; };

es [int acc] returns [int] : PLUS t es[acc + $t.out] {$out = $es.out;}
    | MINUS t es[acc - $t.out] {$out = $es.out;}
    | EPS { $out = acc; };

t returns [int] : pow ts[$pow.out] {$out = $ts.out;};

ts [int acc] returns [int] : MUL pow ts[acc * $pow.out] {$out = $ts.out;}
    | DIV pow ts[acc / $pow.out] {$out = $ts.out;}
    | EPS { $out = acc; };

pow returns [int] : f pows {$out = std::pow($f.out, $pows.out);};

pows returns [int] : POW f pows  {$out = std::pow($f.out, $pows.out);} | EPS { $out = 1; };

f returns [int]: NUMBER {$out = std::stoi($NUMBER.out);} | LP e RP {$out = $e.out;};
